package com.yrgo.dataaccess;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Date;
import java.util.List;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;


public class CustomerDaoJdbcTemplateImpl implements CustomerDao {

    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANYNAME, NOTES) VALUES (?,?,?)";
    private static final String UPDATE_CUSTOMER_SQL = "UPDATE CUSTOMER SET COMPANYNAME, NOTES WHERE CUSTOMER_ID=?";
    private static final String GET_CUSTOMER_BY_ID_SQL = "SELECT CUSTOMER_ID, COMPANYNAME, NOTES FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_CUSTOMER_BY_NAME_SQL = "SELECT CUSTOMER_ID, COMPANYNAME, NOTES FROM CUSTOMER WHERE COMPANYNAME=?";
    private static final String GET_ALL_CUSTOMERS_SQL = "SELECT * FROM CUSTOMER";
    private static final String ADD_CALL_SQL = "INSERT INTO CUSTOMER_CALL (TIME_AND_DATE, NOTES, CUSTOMER_ID) VALUES (?,?,?)";
    private static final String GET_CALL_BY_CUSTOMER_ID_SQL = "SELECT CALL_ID, DATE, NOTES FROM CUSTOMER_CALL WHERE CUSTOMER_ID=?";
    private static final String CREATE_TABLE_CUSTOMER_SQL = "CREATE TABLE CUSTOMER (CUSTOMER_ID VARCHAR(255), COMPANYNAME VARCHAR(255), NOTES VARCHAR(255), OWNING_USER VARCHAR(20))";
    private static final String CREATE_TABLE_CUSTOMERS_CALL_SQL = "CREATE TABLE CUSTOMER_CALL (CALL_ID integer generated by default as identity (start with 1), TIME_AND_DATE DATE, NOTES VARCHAR(255), CUSTOMER_ID  VARCHAR(255))";


    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
        createTables();
    }
    private void createTables() {
        try {
            this.template.update(CREATE_TABLE_CUSTOMER_SQL);
            this.template.update(CREATE_TABLE_CUSTOMERS_CALL_SQL);
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
//            System.out.println("Assuming the Action table exists");
            e.printStackTrace();
        }
    }

    @Override
    public void create(Customer customer) {
        this.template.update(INSERT_SQL, customer.getCustomerId(),
                customer.getCompanyName(),
                customer.getNotes());
    }


    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.query(GET_CUSTOMER_BY_ID_SQL,
                new CustomerRowMapper(), customerId).get(0);

    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(GET_CUSTOMER_BY_NAME_SQL,
                new CustomerRowMapper(), name);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_CUSTOMER_SQL, customerToUpdate.getCompanyName(),
                customerToUpdate.getNotes(),
                customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(GET_ALL_CUSTOMERS_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        List<Call> callList = this.template.query(GET_CALL_BY_CUSTOMER_ID_SQL, new CallRowMapper(), customerId);
        callList.forEach(customer::addCall);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        this.template.update(ADD_CALL_SQL, newCall.getTimeAndDate(), newCall.getNotes(), customerId);
    }


    private static class CustomerRowMapper implements RowMapper<Customer> {
        @Override
        public Customer mapRow(ResultSet resultSet, int i) throws SQLException {
            String customerId = resultSet.getString(1);

            String companyName = resultSet.getString(2);
            ;
            String notes = resultSet.getString(3);
            return new Customer(customerId, companyName, notes);
        }
    }

    private static class CallRowMapper implements RowMapper<Call> {
        @Override
        public Call mapRow(ResultSet resultSet, int i) throws SQLException {
            Date timeAndDate = resultSet.getTime(2);
            String notes = resultSet.getString(3);

            return new Call(timeAndDate, notes);
        }
    }
}
